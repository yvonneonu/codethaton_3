import { AuthClass } from './Auth/index.mjs';
import { Hub, AMPLIFY_SYMBOL } from '../Hub/index.mjs';
import { parseAWSExports } from '../parseAWSExports.mjs';
import '../utils/getClientInfo/getClientInfo.mjs';
import '../utils/retry/retry.mjs';
import { deepFreeze } from '../utils/deepFreeze.mjs';

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
class AmplifyClass {
    constructor() {
        this.resourcesConfig = {};
        this.libraryOptions = {};
        this.Auth = new AuthClass();
    }
    /**
     * Configures Amplify for use with your back-end resources.
     *
     * @remarks
     * This API does not perform any merging of either `resourcesConfig` or `libraryOptions`. The most recently
     * provided values will be used after configuration.
     *
     * @remarks
     * `configure` can be used to specify additional library options where available for supported categories.
     *
     * @param resourceConfig - Back-end resource configuration. Typically provided via the `aws-exports.js` file.
     * @param libraryOptions - Additional options for customizing the behavior of the library.
     */
    configure(resourcesConfig, libraryOptions) {
        let resolvedResourceConfig;
        if (Object.keys(resourcesConfig).some(key => key.startsWith('aws_'))) {
            resolvedResourceConfig = parseAWSExports(resourcesConfig);
        }
        else {
            resolvedResourceConfig = resourcesConfig;
        }
        this.resourcesConfig = resolvedResourceConfig;
        if (libraryOptions) {
            this.libraryOptions = libraryOptions;
        }
        // Make resource config immutable
        this.resourcesConfig = deepFreeze(this.resourcesConfig);
        this.Auth.configure(this.resourcesConfig.Auth, this.libraryOptions.Auth);
        Hub.dispatch('core', {
            event: 'configure',
            data: resourcesConfig,
        }, 'Configure', AMPLIFY_SYMBOL);
    }
    /**
     * Provides access to the current back-end resource configuration for the Library.
     *
     * @returns Returns the immutable back-end resource configuration.
     */
    getConfig() {
        return this.resourcesConfig;
    }
}
/**
 * The `Amplify` utility is used to configure the library.
 *
 * @remarks
 * `Amplify` is responsible for orchestrating cross-category communication within the library.
 */
const Amplify = new AmplifyClass();

export { Amplify, AmplifyClass };
//# sourceMappingURL=Amplify.mjs.map
