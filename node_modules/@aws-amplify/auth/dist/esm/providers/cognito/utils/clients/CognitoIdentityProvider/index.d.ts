import type { ConfirmForgotPasswordCommandInput as ConfirmForgotPasswordInput, ConfirmForgotPasswordCommandOutput as ConfirmForgotPasswordOutput, ForgotPasswordCommandInput as ForgotPasswordInput, ForgotPasswordCommandOutput as ForgotPasswordOutput, ResendConfirmationCodeCommandInput as ResendConfirmationCodeInput, ResendConfirmationCodeCommandOutput as ResendConfirmationCodeOutput, SignUpCommandInput as SignUpInput, SignUpCommandOutput as SignUpOutput, InitiateAuthCommandInput as InitiateAuthInput, InitiateAuthCommandOutput as InitiateAuthOutput, RespondToAuthChallengeCommandInput as RespondToAuthChallengeInput, RespondToAuthChallengeCommandOutput as RespondToAuthChallengeOutput, ConfirmSignUpCommandOutput as ConfirmSignUpOutput, ConfirmSignUpCommandInput as ConfirmSignUpInput, VerifySoftwareTokenCommandInput as VerifySoftwareTokenInput, VerifySoftwareTokenCommandOutput as VerifySoftwareTokenOutput, AssociateSoftwareTokenCommandInput as AssociateSoftwareTokenInput, AssociateSoftwareTokenCommandOutput as AssociateSoftwareTokenOutput, SetUserMFAPreferenceCommandInput as SetUserMFAPreferenceInput, SetUserMFAPreferenceCommandOutput as SetUserMFAPreferenceOutput, GetUserCommandInput as GetUserInput, GetUserCommandOutput as GetUserOutput, ChangePasswordCommandInput as ChangePasswordInput, ChangePasswordCommandOutput as ChangePasswordOutput, ConfirmDeviceCommandInput as ConfirmDeviceInput, ConfirmDeviceCommandOutput as ConfirmDeviceOutput, ForgetDeviceCommandInput as ForgetDeviceInput, ForgetDeviceCommandOutput as ForgetDeviceOutput, DeleteUserCommandInput as DeleteUserInput, DeleteUserCommandOutput as DeleteUserOutput, GetUserAttributeVerificationCodeCommandInput as GetUserAttributeVerificationCodeInput, GetUserAttributeVerificationCodeCommandOutput as GetUserAttributeVerificationCodeOutput, GlobalSignOutCommandInput as GlobalSignOutInput, GlobalSignOutCommandOutput as GlobalSignOutOutput, UpdateUserAttributesCommandInput as UpdateUserAttributesInput, UpdateUserAttributesCommandOutput as UpdateUserAttributesOutput, VerifyUserAttributeCommandInput as VerifyUserAttributeInput, VerifyUserAttributeCommandOutput as VerifyUserAttributeOutput, UpdateDeviceStatusCommandInput as UpdateDeviceStatusInput, UpdateDeviceStatusCommandOutput as UpdateDeviceStatusOutput, ListDevicesCommandInput as ListDevicesInput, ListDevicesCommandOutput as ListDevicesOutput, DeleteUserAttributesCommandInput as DeleteUserAttributesInput, DeleteUserAttributesCommandOutput as DeleteUserAttributesOutput } from './types';
import { Endpoint, HttpResponse } from '@aws-amplify/core/internals/aws-client-utils';
type RevokeTokenInput = {
    Token: string;
    ClientId: string;
};
type RevokeTokenOutput = {};
export declare const initiateAuth: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: InitiateAuthInput) => Promise<InitiateAuthOutput>;
export declare const revokeToken: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: RevokeTokenInput) => Promise<RevokeTokenOutput>;
export declare const signUp: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: SignUpInput) => Promise<SignUpOutput>;
export declare const confirmSignUp: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: ConfirmSignUpInput) => Promise<ConfirmSignUpOutput>;
export declare const forgotPassword: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: ForgotPasswordInput) => Promise<ForgotPasswordOutput>;
export declare const confirmForgotPassword: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: ConfirmForgotPasswordInput) => Promise<ConfirmForgotPasswordOutput>;
export declare const respondToAuthChallenge: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: RespondToAuthChallengeInput) => Promise<RespondToAuthChallengeOutput>;
export declare const resendConfirmationCode: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: ResendConfirmationCodeInput) => Promise<ResendConfirmationCodeOutput>;
export declare const verifySoftwareToken: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: VerifySoftwareTokenInput) => Promise<VerifySoftwareTokenOutput>;
export declare const associateSoftwareToken: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: AssociateSoftwareTokenInput) => Promise<AssociateSoftwareTokenOutput>;
export declare const setUserMFAPreference: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: SetUserMFAPreferenceInput) => Promise<SetUserMFAPreferenceOutput>;
export declare const getUser: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: GetUserInput) => Promise<GetUserOutput>;
export declare const changePassword: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: ChangePasswordInput) => Promise<ChangePasswordOutput>;
export declare const confirmDevice: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: ConfirmDeviceInput) => Promise<ConfirmDeviceOutput>;
export declare const forgetDevice: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: ForgetDeviceInput) => Promise<ForgetDeviceOutput>;
export declare const deleteUser: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: DeleteUserInput) => Promise<DeleteUserOutput>;
export declare const getUserAttributeVerificationCode: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: GetUserAttributeVerificationCodeInput) => Promise<GetUserAttributeVerificationCodeOutput>;
export declare const globalSignOut: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: GlobalSignOutInput) => Promise<GlobalSignOutOutput>;
export declare const updateUserAttributes: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: UpdateUserAttributesInput) => Promise<UpdateUserAttributesOutput>;
export declare const verifyUserAttribute: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: VerifyUserAttributeInput) => Promise<VerifyUserAttributeOutput>;
export declare const updateDeviceStatus: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: UpdateDeviceStatusInput) => Promise<UpdateDeviceStatusOutput>;
export declare const listDevices: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: ListDevicesInput) => Promise<ListDevicesOutput>;
export declare const deleteUserAttributes: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "default" | "no-store" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    region: string;
    userAgentHeader?: string | undefined;
    maxAttempts?: number | undefined;
    abortSignal?: AbortSignal | undefined;
    withCrossDomainCredentials?: boolean | undefined;
}, input: DeleteUserAttributesInput) => Promise<DeleteUserAttributesOutput>;
export {};
