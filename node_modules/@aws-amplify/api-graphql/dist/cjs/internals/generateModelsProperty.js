'use strict';

Object.defineProperty(exports, "__esModule", { value: true });
exports.generateModelsProperty = void 0;
const APIClient_1 = require("./APIClient");
const list_1 = require("./operations/list");
const get_1 = require("./operations/get");
const subscription_1 = require("./operations/subscription");
const observeQuery_1 = require("./operations/observeQuery");
function generateModelsProperty(client, params) {
    const models = {};
    const config = params.amplify.getConfig();
    if (!config.API?.GraphQL) {
        // breaks compatibility with certain bundler, e.g. Vite where component files are evaluated before
        // the entry point causing false positive errors. Revisit how to better handle this post-launch
        // throw new Error(
        // 	'The API configuration is missing. This is likely due to Amplify.configure() not being called
        // prior to generateClient().'
        // );
        return {};
    }
    const modelIntrospection = config.API.GraphQL.modelIntrospection;
    if (!modelIntrospection) {
        return {};
    }
    const SUBSCRIPTION_OPS = ['ONCREATE', 'ONUPDATE', 'ONDELETE'];
    for (const model of Object.values(modelIntrospection.models)) {
        const { name } = model;
        models[name] = {};
        Object.entries(APIClient_1.graphQLOperationsInfo).forEach(([key, { operationPrefix }]) => {
            const operation = key;
            if (operation === 'LIST') {
                models[name][operationPrefix] = (0, list_1.listFactory)(client, modelIntrospection, model);
            }
            else if (SUBSCRIPTION_OPS.includes(operation)) {
                models[name][operationPrefix] = (0, subscription_1.subscriptionFactory)(client, modelIntrospection, model, operation);
            }
            else if (operation === 'OBSERVE_QUERY') {
                models[name][operationPrefix] = (0, observeQuery_1.observeQueryFactory)(models, model);
            }
            else {
                models[name][operationPrefix] = (0, get_1.getFactory)(client, modelIntrospection, model, operation);
            }
        });
    }
    return models;
}
exports.generateModelsProperty = generateModelsProperty;
//# sourceMappingURL=generateModelsProperty.js.map
