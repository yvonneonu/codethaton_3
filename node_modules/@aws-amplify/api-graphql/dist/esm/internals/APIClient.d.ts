import { GraphQLAuthMode, ModelIntrospectionSchema, SchemaModel, SchemaModels } from '@aws-amplify/core/internals/utils';
import { AuthModeParams, ClientWithModels, ListArgs, QueryArgs, V6Client } from '../types';
import { CustomHeaders } from '@aws-amplify/data-schema-types';
/**
 *
 * @param GraphQL response object
 * @returns response object with `items` properties flattened
 */
export declare const flattenItems: (obj: Record<string, any>) => Record<string, any>;
export declare function initializeModel(client: ClientWithModels, modelName: string, result: any[], modelIntrospection: ModelIntrospectionSchema, authMode: GraphQLAuthMode | undefined, authToken: string | undefined, context?: boolean): any[];
export declare const graphQLOperationsInfo: {
    CREATE: {
        operationPrefix: "create";
        usePlural: boolean;
    };
    READ: {
        operationPrefix: "get";
        usePlural: boolean;
    };
    UPDATE: {
        operationPrefix: "update";
        usePlural: boolean;
    };
    DELETE: {
        operationPrefix: "delete";
        usePlural: boolean;
    };
    LIST: {
        operationPrefix: "list";
        usePlural: boolean;
    };
    ONCREATE: {
        operationPrefix: "onCreate";
        usePlural: boolean;
    };
    ONUPDATE: {
        operationPrefix: "onUpdate";
        usePlural: boolean;
    };
    ONDELETE: {
        operationPrefix: "onDelete";
        usePlural: boolean;
    };
    OBSERVE_QUERY: {
        operationPrefix: "observeQuery";
        usePlural: boolean;
    };
};
export type ModelOperation = keyof typeof graphQLOperationsInfo;
/**
 * Generates nested Custom Selection Set IR from path
 *
 * @param modelDefinitions
 * @param modelName
 * @param selectionSet - array of object paths
 * @example
 * ### Given
 * `selectionSet = ['id', 'comments.post.id']`
 * ### Returns
 * ```ts
 * {
 *   id: '',
 *   comments: {
 *     items: { post: { id: '' } }
 *   }
 * }
 * ```
 */
export declare function customSelectionSetToIR(modelDefinitions: SchemaModels, modelName: string, selectionSet: string[]): Record<string, string | object>;
/**
 * Stringifies selection set IR
 * * @example
 * ### Given
 * ```ts
 * {
 *   id: '',
 *   comments: {
 *     items: { post: { id: '' } }
 *   }
 * }
 * ```
 * ### Returns
 * `'id comments { items { post { id } } }'`
 */
export declare function selectionSetIRToString(obj: Record<string, string | any>): string;
export declare function generateSelectionSet(modelDefinitions: SchemaModels, modelName: string, selectionSet?: string[]): string;
export declare function generateGraphQLDocument(modelDefinitions: SchemaModels, modelName: string, modelOperation: ModelOperation, listArgs?: ListArgs): string;
export declare function buildGraphQLVariables(modelDefinition: SchemaModel, operation: ModelOperation, arg: QueryArgs | undefined, modelIntrospection: ModelIntrospectionSchema): object;
/**
 * Iterates over mutation input values and resolves any model inputs to their corresponding join fields/values
 *
 * @example
 * ### Usage
 * ```ts
 * const result = normalizeMutationInput({ post: post }, model, modelDefinition);
 * ```
 * ### Result
 * ```ts
 * { postId: "abc123" }
 * ```
 *
 */
export declare function normalizeMutationInput(mutationInput: QueryArgs, model: SchemaModel, modelIntrospection: ModelIntrospectionSchema): QueryArgs;
/**
 * Produces a parameter object that can contains auth mode/token overrides
 * only if present in either `options` (first) or configured on the `client`
 * as a fallback.
 *
 * @param client Configured client from `generateClient`
 * @param options Args/Options obect from call site.
 * @returns
 */
export declare function authModeParams(client: ClientWithModels, options?: AuthModeParams): AuthModeParams;
/**
 * Retrieves custom headers from either the client or request options.
 * @param {client} V6Client | V6ClientSSRRequest | V6ClientSSRCookies - for extracting client headers
 * @param {requestHeaders} [CustomHeaders] - request headers
 * @returns {CustomHeaders} - custom headers
 */
export declare function getCustomHeaders(client: V6Client | ClientWithModels, requestHeaders?: CustomHeaders): CustomHeaders;
